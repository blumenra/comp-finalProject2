(append '(1 2 3 4 5 6 "maor") '(8))
(append '(1) '(3) '(5))
(append '(1))
(append)
(append '())
(append '() '())
(append '(1 2) '())
(append '() '(1 2 3 "maor"))
(append '() '(1) '(3) '() '(4) '("maor") '(5/7) '() )
(append '() (cons 1 2))
(append (list 5) (list "maor") (list 5/7) (list '()) (list 5 6 7))
(append (list 1 3) (list 7) (list 5/6) '() '(3 4 5))
(append '(3 4 5 6 "maor") '(7 6 "maor" 9 8))
(append (list "maor" "string" "world"))
(define koko '("1" "3" #\5 #\x53))
(append koko koko)
(define koko (append (list 5 5/7) '(1)))
koko
(define koko (append (list 3 #\x52) '(#\7)))
koko
(define truer '(#t))
(define checker (lambda (x y z) (append x y z)))
(define result (checker (list 10) koko truer))
result 
(pair? result)
(define result (checker (list 0) koko truer))
;result
(pair? result)