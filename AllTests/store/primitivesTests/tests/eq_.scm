(eq? 5 5)
(eq? 'maor 'pnina)
(eq? 'maor 'maor)
(define s1 "maor")
(define s2 s1)
(eq? s1 s2)
(eq? '() '())
(eq? '(1 2) '(1 . (2 . (3 .()))))
(define p1 '(1 2))
(define p2 p1)
(eq? p1 p2)
(eq? p2 p1)
(eq? p1 p1)
(eq? p2 p2)
(define v1 '#(1 2))
(define v2 p1)
(eq? v1 v2)
(eq? v2 v1)
(eq? v1 v1)
(eq? v2 v2)
(eq? 5 5)
(eq? (string->symbol "sym") (string->symbol "sym"))
(eq? (symbol->string 'sym2) (symbol->string 'sym2))
(eq? (symbol->string 'sym3) (string->symbol "sym3"))
(eq? (string->symbol "sym3") (string->symbol "sym3"))
(eq? (or 1 2) (or 2 1))
(eq? (or 1 2) (or 1 2))
(eq? (begin 1 2) (begin 1 2))
(eq? ((lambda (x) x) 1) ((lambda (x) x) 2))
(eq? ((lambda (x) x) 1) ((lambda (x) x) 1))
(eq? 3/1 3)
(eq? 0/1 0)
(eq? -3 3)
(eq? #\a #\b)
(eq? #\a #\a)
(eq? #\a 61)
(eq? 'maor "maor")

(define numberer1 6)
(define numberer2 6)
(define checker (lambda (x) (lambda (y z) (x y z))))
((checker eq?) numberer1 numberer2)
((checker eq?) "string" 'string)
((checker eq?) 'symbol 'symbol)
((checker eq?) #t #t)
((checker eq?) 555 -555)
(define shever1 5/7)
(define shever2 shever1)
((checker eq?) shever2 shever1)
((checker eq?) shever2 shever2)
((checker eq?) 3/1 3)
((checker eq?) '() '())
((checker eq?) '(1 2) '(1))
((checker eq?) '#(1 2 #t) 5)
((checker eq?) (begin 1 2 #\a) #\a)
((checker eq?) (begin #\b 1 2) 2)
((checker eq?) (begin #\b 1 2) #\b)
